{"ast":null,"code":"var _jsxFileName = \"/Users/dmitrijivasenko/Desktop/RS-School/projects/currency-exchange/src/components/tooltip.jsx\";\nimport React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport '../styles/tooltip.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Tooltip extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      visible: false\n    };\n\n    this.show = () => {\n      this.setVisibility(true);\n    };\n\n    this.hide = () => {\n      this.setVisibility(false);\n    };\n\n    this.setVisibility = visible => {\n      this.setState({\n        visible\n      });\n    };\n\n    this.showLast = () => {};\n  }\n\n  render() {\n    const {\n      visible\n    } = this.state;\n    const {\n      children,\n      content,\n      style\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [visible && /*#__PURE__*/_jsxDEV(\"span\", {\n        style: style,\n        className: \"tooltip\",\n        children: content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 24\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"targetElement\",\n        onMouseOver: this.show,\n        onMouseLeave: this.hide,\n        onChange: this.showLast,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nTooltip.propTypes = {\n  children: PropTypes.node.isRequired,\n  content: PropTypes.string,\n  style: PropTypes.objectOf(PropTypes.string)\n};\nTooltip.defaultProps = {\n  content: 'Tooltip content',\n  style: {}\n};\nexport default Tooltip;","map":{"version":3,"sources":["/Users/dmitrijivasenko/Desktop/RS-School/projects/currency-exchange/src/components/tooltip.jsx"],"names":["React","Component","Fragment","PropTypes","Tooltip","state","visible","show","setVisibility","hide","setState","showLast","render","children","content","style","props","propTypes","node","isRequired","string","objectOf","defaultProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,uBAAP;;;AAEA,MAAMC,OAAN,SAAsBH,SAAtB,CAAgC;AAAA;AAAA;AAAA,SAY9BI,KAZ8B,GAYtB;AACNC,MAAAA,OAAO,EAAE;AADH,KAZsB;;AAAA,SAgB9BC,IAhB8B,GAgBvB,MAAM;AACX,WAAKC,aAAL,CAAmB,IAAnB;AACD,KAlB6B;;AAAA,SAoB9BC,IApB8B,GAoBvB,MAAM;AACX,WAAKD,aAAL,CAAmB,KAAnB;AACD,KAtB6B;;AAAA,SAwB9BA,aAxB8B,GAwBdF,OAAO,IAAI;AACzB,WAAKI,QAAL,CAAc;AAAEJ,QAAAA;AAAF,OAAd;AACD,KA1B6B;;AAAA,SA4B9BK,QA5B8B,GA4BnB,MAAM,CAEhB,CA9B6B;AAAA;;AAgC9BC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEN,MAAAA;AAAF,QAAc,KAAKD,KAAzB;AACA,UAAM;AAAEQ,MAAAA,QAAF;AAAYC,MAAAA,OAAZ;AAAqBC,MAAAA;AAArB,QAA+B,KAAKC,KAA1C;AAEA,wBACE,QAAC,QAAD;AAAA,iBACMV,OAAO,iBAAI;AAAM,QAAA,KAAK,EAAES,KAAb;AAAoB,QAAA,SAAS,EAAC,SAA9B;AAAA,kBAAyCD;AAAzC;AAAA;AAAA;AAAA;AAAA,cADjB,eAEE;AACE,QAAA,SAAS,EAAC,eADZ;AAEE,QAAA,WAAW,EAAE,KAAKP,IAFpB;AAGE,QAAA,YAAY,EAAE,KAAKE,IAHrB;AAIE,QAAA,QAAQ,EAAE,KAAKE,QAJjB;AAAA,kBAKEE;AALF;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAWD;;AA/C6B;;AAA1BT,O,CACGa,S,GAAY;AACjBJ,EAAAA,QAAQ,EAAEV,SAAS,CAACe,IAAV,CAAeC,UADR;AAEjBL,EAAAA,OAAO,EAAEX,SAAS,CAACiB,MAFF;AAGjBL,EAAAA,KAAK,EAAEZ,SAAS,CAACkB,QAAV,CAAmBlB,SAAS,CAACiB,MAA7B;AAHU,C;AADfhB,O,CAOGkB,Y,GAAe;AACpBR,EAAAA,OAAO,EAAE,iBADW;AAEpBC,EAAAA,KAAK,EAAE;AAFa,C;AA2CxB,eAAeX,OAAf","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport '../styles/tooltip.css';\n\nclass Tooltip extends Component {\n  static propTypes = {\n    children: PropTypes.node.isRequired,\n    content: PropTypes.string,\n    style: PropTypes.objectOf(PropTypes.string),\n  }\n\n  static defaultProps = {\n    content: 'Tooltip content',\n    style: {},\n  }\n\n  state = {\n    visible: false,\n  }\n\n  show = () => {\n    this.setVisibility(true);\n  }\n\n  hide = () => {\n    this.setVisibility(false);\n  }\n\n  setVisibility = visible => {\n    this.setState({ visible });\n  }\n\n  showLast = () => {\n      \n  }\n\n  render() {\n    const { visible } = this.state;\n    const { children, content, style } = this.props;\n\n    return (\n      <Fragment>\n          { visible && <span style={style} className='tooltip'>{content}</span> }\n        <span\n          className=\"targetElement\"\n          onMouseOver={this.show}\n          onMouseLeave={this.hide}\n          onChange={this.showLast}\n        >{children}</span>\n      </Fragment>\n    );\n  }\n}\n\nexport default Tooltip;\n"]},"metadata":{},"sourceType":"module"}